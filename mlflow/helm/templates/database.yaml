---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: {{ .Release.Namespace | quote }}
stringData:
    {{- $postgresUser := .Values.mlflow.backendStore.postgres.user }}
    username: {{ $postgresUser | quote }}
    {{- $postgresPassword := .Values.mlflow.backendStore.postgres.password | b64dec }}
    password: {{ $postgresPassword | b64enc | quote }}
type: kubernetes.io/basic-auth
---
apiVersion: v1
kind: Secret
metadata:
    name: admin-secret
    namespace: {{ .Release.Namespace | quote }}
type: kubernetes.io/basic-auth
stringData:
    username: postgres
    {{- $adminPasswordSecret := (lookup "v1" "Secret" .Release.Namespace "admin-secret") | default dict }}
    {{- $adminPasswordDict := (get $adminPasswordSecret "data") | default dict }}
    {{- $adminPassword := (get $adminPasswordDict "password") | default (randAlphaNum 32 | b64enc) }}
    password: {{ $adminPassword | quote }}
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
    name: mlflow
    namespace: {{ .Release.Namespace | quote }}
spec:
    instances: 1
    superuserSecret:
        name: admin-secret
    postgresql:
        pg_hba:
        - host all all 10.0.0.0/8 trust
    {{- if eq true $.Values.pg.gke.use }}
    serviceAccountTemplate:
        metadata:
            annotations:
                iam.gke.io/gcp-service-account: {{ .Values.pg.gke.serviceAccount }}
    {{- end }}
    bootstrap:
        {{- if eq "create" $.Values.pg.backup.action }}
        initdb:
            database: db
            owner: {{ .Values.mlflow.backendStore.postgres.user }}
            secret:
                name: app-secret
        {{- else }}
        recovery:
            source: mlflow-backup-cluster
        {{- end }}
    {{- if eq "create" $.Values.pg.backup.action }}
    {{- else }}
    externalClusters:
        - name: mlflow-backup-cluster
          barmanObjectStore:
            destinationPath: {{ template "backup.destination" . }}
            serverName: mlflow-backup
            {{- if eq "minio" $.Values.pg.backup.type -}}
            endpointURL: http://minio:9000
            s3Credentials:
                accessKeyId:
                    name: minio-creds
                    key: accesskey
                secretAccessKey:
                    name: minio-creds
                    key: secretkey
            {{- else }}
            googleCredentials:
                gkeEnvironment: true
            {{- end }}
    {{- end }}
    backup:
        barmanObjectStore:
            destinationPath: {{ .Values.pg.backup.destination }}
            serverName: mlflow
            {{- if eq "minio" $.Values.pg.backup.type }}
            endpointURL: http://minio:9000
            s3Credentials:
                accessKeyId:
                    name: minio-creds
                    key: accesskey
                secretAccessKey:
                    name: minio-creds
                    key: secretkey
            {{- else }}
            googleCredentials:
                gkeEnvironment: true
            {{- end }}
            wal:
                compression: snappy
            data:
                compression: bzip2
        retentionPolicy: "30d"
    storage:
        size: {{ .Values.pg.storage }}
